{"name":"Ntparser","tagline":"A simple and performant N-Triples parser for the JVM","body":"# NtParser\r\n\r\nA simple and performant [N-Triples][N-TRIPLES] parser for the JVM.\r\n\r\n\r\n## Installing\r\n\r\nNtParser is published to [Maven Central][mvn]:\r\n\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>de.knutwalker</groupId>\r\n    <artifactId>ntparser</artifactId>\r\n    <version>0.1</version>\r\n</dependency>\r\n```\r\n\r\n\r\n```scala\r\nlibraryDependencies += \"de.knutwalker\" % \"ntparser\" % \"0.1\"\r\n```\r\n\r\n\r\n```groovy\r\ncompile 'de.knutwalker:ntparser:0.1'\r\n```\r\n\r\n\r\n## Using\r\n\r\n\r\n```scala\r\nimport de.knutwalker.ntparser.StrictNtParser\r\n\r\nStrictNtParser(\"my-graph.nt\") foreach { stmt â‡’\r\n  println(s\"Statement: $stmt\")\r\n}\r\n```\r\n\r\n\r\n```java\r\nimport de.knutwalker.ntparser.Statement;\r\nimport de.knutwalker.ntparser.StrictNtParser;\r\nimport java.util.Iterator;\r\n\r\nIterator<Statement> statementIterator = StrictNtParser.parse(\"my-graph.nt\");\r\nwhile (statementIterator.hasNext()) {\r\n  Statement stmt = statementIterator.next();\r\n  System.out.println(\"Statement: \" + stmt);\r\n}\r\n```\r\n\r\n\r\n### in-depth usage\r\n\r\nThere are two static parsers, `de.knutwalker.ntparser.StrictNtParser` and `de.knutwalker.ntparser.NonStrictNtParser`.\r\n\r\nBoth take either a file name, an `InputStream`, an `Iterable` of String,\r\nor an `Iterator` of String and always return an `Iterator` of `Statement`.\r\nThe `apply` methods are Scala API, the `parse` methods are Java API\r\n(and are thus consuming and producing Java `Iterator`s).\r\nThe file name may be a path to any file or the file name of a resource file.\r\nThe parser can read plain nt files, as well as gzipped and bzipped files.\r\nThe `Iterable` and `Iterator` should represent single lines, that is, at-most one N-Triple per element.\r\n\r\nThe `StrictNtParser` will halt with an Exception at the first parse error.\r\nThe `NonStrictNtParser` will just log exceptions and continue parsing.\r\n\r\nAs an alternative, you can instantiate a `new de.knutwalker.ntparser.NtParser`.\r\nThe `NtParser` has several `parse*` methods, that each take a String and assume,\r\nthat this is _one_ line of some bigger document and that is correctly delimited.\r\nOne invocation of any `parse*` method will parse at-most _one_ statement.\r\n\r\n\r\n## Specification conformity\r\n\r\nNtParser passes [all tests provided by the W3C][rdf-test-cases].\r\n\r\n\r\n## Roadmap\r\n\r\n- parse into different data types, e.g. Jena Model\r\n\r\n\r\n[N-TRIPLES]: http://www.w3.org/TR/2014/REC-n-triples-20140225/ \"RDF 1.1 N-Triples\"\r\n[mvn]: http://search.maven.org/#search|ga|1|g%3A%22de.knutwalker%22%20AND%20%28a%3A%22ntparser_2.11%22%20OR%20a%3A%22ntparser_2.10%22%29\r\n[rdf-test-cases]: http://www.w3.org/TR/2014/NOTE-rdf11-testcases-20140225/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}